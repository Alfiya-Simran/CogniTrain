import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Game, MemoryCard, GameType, Session } from '../types';
import { generateMemoryGamePairs, getEncouragingMessage } from '../services/geminiService';

interface GameViewProps {
  game: Game;
  onGameEnd: (session: Omit<Session, 'date' | 'childId'> | null) => void;
}

const GameView: React.FC<GameViewProps> = ({ game, onGameEnd }) => {
  const [cards, setCards] = useState<MemoryCard[]>([]);
  const [flippedCards, setFlippedCards] = useState<MemoryCard[]>([]);
  const [matchedPairs, setMatchedPairs] = useState<number>(0);
  const [moves, setMoves] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [startTime, setStartTime] = useState<number>(0);
  const [isGameFinished, setIsGameFinished] = useState<boolean>(false);
  const [feedbackMessage, setFeedbackMessage] = useState<string>('');

  const totalPairs = 8;

  const initializeGame = useCallback(async () => {
    setIsGameFinished(false);
    setMatchedPairs(0);
    setMoves(0);
    setFlippedCards([]);
    setIsLoading(true);
    setError(null);
    try {
      const pairs = await generateMemoryGamePairs();
      if(pairs.length < totalPairs) {
        throw new Error("Not enough pairs generated by AI.");
      }
      const shuffledCards = pairs.flatMap((pair, index) => [
        { id: index * 2, pairId: index, text: pair.item1, isFlipped: false, isMatched: false },
        { id: index * 2 + 1, pairId: index, text: pair.item2, isFlipped: false, isMatched: false },
      ]).sort(() => Math.random() - 0.5);

      setCards(shuffledCards);
      setStartTime(Date.now());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to start game. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    initializeGame();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [game]);

  const calculateScore = useMemo(() => {
    const duration = startTime > 0 ? (Date.now() - startTime) / 1000 : 0;
    const baseScore = totalPairs * 100;
    const movePenalty = moves * 10;
    const timePenalty = Math.floor(duration * 2);
    return Math.max(0, baseScore * 2 - movePenalty - timePenalty);
  }, [moves, startTime]);
  
  const finishGame = useCallback(async () => {
      setIsGameFinished(true);
      setIsLoading(true);
      const finalScore = calculateScore;

      try {
        const message = await getEncouragingMessage(finalScore, totalPairs * 200);
        setFeedbackMessage(message);
      } catch (err) {
        setFeedbackMessage("Great job! You completed the game!");
      } finally {
        setIsLoading(false);
      }
  }, [calculateScore]);


  useEffect(() => {
    if (matchedPairs === totalPairs && cards.length > 0 && !isGameFinished) {
      setTimeout(() => finishGame(), 500);
    }
  }, [matchedPairs, cards.length, finishGame, isGameFinished]);


  const handleCardClick = (clickedCard: MemoryCard) => {
    if (isGameFinished || flippedCards.length === 2 || clickedCard.isFlipped || clickedCard.isMatched) {
      return;
    }

    const newFlippedCards = [...flippedCards, clickedCard];
    let updatedCards = cards.map(c => c.id === clickedCard.id ? { ...c, isFlipped: true } : c);
    setCards(updatedCards);
    setFlippedCards(newFlippedCards);

    if (newFlippedCards.length === 2) {
      setMoves(moves + 1);
      const [firstCard, secondCard] = newFlippedCards;
      if (firstCard.pairId === secondCard.pairId) {
        // Match
        setTimeout(() => {
            setMatchedPairs(prev => prev + 1);
            let matchedUpdatedCards = updatedCards.map(c => 
                c.pairId === firstCard.pairId ? { ...c, isFlipped: true, isMatched: true } : c
            );
            setCards(matchedUpdatedCards);
            setFlippedCards([]);
        }, 200);
      } else {
        // No match
        setTimeout(() => {
          let resetCards = updatedCards.map(c => 
            (c.id === firstCard.id || c.id === secondCard.id) ? { ...c, isFlipped: false } : c
          );
          setCards(resetCards);
          setFlippedCards([]);
        }, 1200);
      }
    }
  };

  const handleEndGameAndSave = () => {
    const duration = Math.round((Date.now() - startTime) / 1000);
    const accuracy = moves > 0 ? Math.max(0, Math.min(100, Math.round((totalPairs / moves) * 100))) : 0;
    onGameEnd({
      gameType: game.type,
      score: calculateScore,
      accuracy,
      duration,
    });
  }

  if (isLoading && cards.length === 0) {
    return <div className="text-center p-10"><h2 className="text-2xl font-semibold">Loading your game...</h2><p className="text-slate-500 mt-2">The AI is preparing your challenge!</p></div>;
  }
  
  if (error) {
    return (
      <div className="text-center p-10 bg-red-100 rounded-lg">
        <h2 className="text-2xl font-semibold text-red-700">Oops! Something went wrong.</h2>
        <p className="text-red-600 mt-2">{error}</p>
        <button onClick={() => onGameEnd(null)} className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Back to Dashboard</button>
      </div>
    );
  }

  if (isGameFinished) {
    const duration = Math.round((Date.now() - startTime) / 1000);
    const accuracy = moves > 0 ? Math.max(0, Math.min(100, Math.round((totalPairs / moves) * 100))) : 0;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 animate-fade-in">
        <div className="bg-white rounded-2xl shadow-2xl p-8 m-4 max-w-md w-full text-center transform transition-all scale-100">
          <h2 className="text-3xl font-bold text-yellow-500">Congratulations!</h2>
          <p className="mt-4 text-lg text-slate-600 min-h-[5rem] flex items-center justify-center">
            {isLoading ? 'Getting your results...' : feedbackMessage}
          </p>
          <div className="mt-6 space-y-3 text-left bg-slate-50 p-4 rounded-lg">
              <p className="flex justify-between items-center"><span className="font-semibold">Final Score:</span> <span className="text-xl font-bold text-blue-600">{calculateScore}</span></p>
              <p className="flex justify-between items-center"><span className="font-semibold">Accuracy:</span> <span className="font-bold text-green-600">{accuracy}%</span></p>
              <p className="flex justify-between items-center"><span className="font-semibold">Time:</span> <span className="font-bold text-purple-600">{duration}s</span></p>
          </div>
          <div className="mt-8 flex flex-col sm:flex-row gap-4">
              <button onClick={initializeGame} className="w-full px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">Play Again</button>
              <button onClick={handleEndGameAndSave} className="w-full px-6 py-3 border border-slate-300 text-base font-medium rounded-md text-slate-700 bg-white hover:bg-slate-100">Save & Exit</button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6 bg-white p-4 rounded-lg shadow">
        <div>
          <h2 className="text-2xl font-bold">{game.title}</h2>
          <p className="text-slate-500">Find all the matching pairs!</p>
        </div>
        <div className="text-right">
          <p className="text-slate-500">Moves</p>
          <p className="text-2xl font-bold">{moves}</p>
        </div>
        <button onClick={() => onGameEnd(null)} className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">Exit Game</button>
      </div>

      <div className="grid grid-cols-4 gap-4" style={{ perspective: '1000px' }}>
        {cards.map((card) => (
          <div key={card.id} className="aspect-square" onClick={() => handleCardClick(card)}>
            <div className={`w-full h-full rounded-lg shadow-md transition-transform duration-500 transform-style-3d ${card.isFlipped ? 'rotate-y-180' : ''}`}>
              <div className="absolute w-full h-full backface-hidden flex items-center justify-center bg-blue-500 rounded-lg cursor-pointer hover:bg-blue-600">
                <span className="text-4xl text-white font-bold">?</span>
              </div>
              <div className={`absolute w-full h-full backface-hidden rotate-y-180 flex items-center justify-center text-center p-2 rounded-lg text-lg sm:text-xl md:text-2xl font-bold ${card.isMatched ? 'bg-green-200' : 'bg-white'}`}>
                {card.text}
              </div>
            </div>
          </div>
        ))}
      </div>
      <style>{`
        .transform-style-3d { transform-style: preserve-3d; }
        .rotate-y-180 { transform: rotateY(180deg); }
        .backface-hidden { backface-visibility: hidden; }
      `}</style>
    </div>
  );
};

export default GameView;
